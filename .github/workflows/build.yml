name: Build and Release Tank Battle

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        java: [17]
        include:
          - os: ubuntu-latest
            platform_name: linux
          - os: windows-latest
            platform_name: windows
          - os: macos-latest
            platform_name: mac

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: maven

      - name: Prepare Icons for macOS
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p src/main/resources/images/icons
        shell: bash

      - name: Prepare Icons for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p src/main/resources/images/icons
        shell: bash

      - name: Clean Maven repository
        run: mvn clean -B

      - name: Build with Maven
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            mvn -B package -Dmaven.test.skip=true -Pmac
          else
            mvn -B package -Dmaven.test.skip=true -P${{ matrix.platform_name }}
          fi
        shell: bash

      - name: Create Shaded JAR Archive
        run: |
          mkdir -p release
          cp target/*-shaded.jar release/TankBattle-${{ matrix.platform_name }}.jar

      # Windows - Create EXE installer
      - name: Setup WiX for Windows Installer
        if: matrix.os == 'windows-latest'
        run: |
          curl -L -o wix311-binaries.zip https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip
          Expand-Archive wix311-binaries.zip -DestinationPath wix311
          echo "D:/a/java-tank-battle/java-tank-battle/wix311" >> $GITHUB_PATH
        shell: pwsh

      - name: Create Windows Installer
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p installer/input
          cp target/*-shaded.jar installer/input/TankBattle.jar
          mkdir -p installer/input/images
          cp -r src/main/resources/images installer/input/
          
          echo '@echo off
          java -jar TankBattle.jar' > installer/input/TankBattle.bat
          
          jpackage --input installer/input \
            --name "Tank Battle" \
            --main-jar TankBattle.jar \
            --main-class com.tankbattle.Launcher \
            --type exe \
            --win-console \
            --win-shortcut \
            --win-menu \
            --icon src/main/resources/images/tank_battle.ico \
            --dest release
            
          cp release/*.exe release/TankBattle-Windows-Installer.exe
        shell: bash

      # macOS - Create DMG installer
      - name: Create macOS App Bundle and DMG
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p installer/input
          cp target/*-shaded.jar installer/input/TankBattle.jar
          mkdir -p installer/input/images
          cp -r src/main/resources/images installer/input/
          
          cat > installer/input/Info.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleDevelopmentRegion</key>
              <string>zh_CN</string>
              <key>CFBundleExecutable</key>
              <string>Tank Battle</string>
              <key>CFBundleIconFile</key>
              <string>tank_battle.ico</string>
              <key>CFBundleIdentifier</key>
              <string>org.winsking.tankbattle</string>
              <key>CFBundleInfoDictionaryVersion</key>
              <string>6.0</string>
              <key>CFBundleName</key>
              <string>Tank Battle</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0</string>
              <key>CFBundleVersion</key>
              <string>1</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.9</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOL
          
          jpackage --input installer/input \
            --name "Tank Battle" \
            --main-jar TankBattle.jar \
            --main-class com.tankbattle.Launcher \
            --type dmg \
            --mac-package-name "Tank Battle" \
            --icon src/main/resources/images/tank_battle.ico \
            --dest release
          
          cp release/*.dmg release/TankBattle-macOS.dmg
        shell: bash

      # Linux - Create DEB package
      - name: Create Linux DEB Package
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p installer/input
          cp target/*-shaded.jar installer/input/TankBattle.jar
          mkdir -p installer/input/images
          cp -r src/main/resources/images installer/input/
          
          echo '#!/bin/bash
          java -jar /opt/tankbattle/TankBattle.jar "$@"' > installer/input/tankbattle
          chmod +x installer/input/tankbattle
          
          jpackage --input installer/input \
            --name tankbattle \
            --main-jar TankBattle.jar \
            --main-class com.tankbattle.Launcher \
            --type deb \
            --linux-shortcut \
            --linux-app-category "Game" \
            --linux-package-name "tankbattle" \
            --icon src/main/resources/images/tank_battle.ico \
            --dest release
          
          cp release/*.deb release/TankBattle-Linux.deb
        shell: bash

      - name: Create Platform-specific Package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p release/TankBattle-${{ matrix.platform_name }}
          cp target/*-shaded.jar release/TankBattle-${{ matrix.platform_name }}/TankBattle.jar
          echo '@echo off
          java -jar TankBattle.jar
          pause' > release/TankBattle-${{ matrix.platform_name }}/TankBattle.bat
          powershell Compress-Archive -Path release/TankBattle-${{ matrix.platform_name }} -DestinationPath release/TankBattle-${{ matrix.platform_name }}.zip

      - name: Create Platform-specific Package (Mac)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p release/TankBattle-${{ matrix.platform_name }}
          cp target/*-shaded.jar release/TankBattle-${{ matrix.platform_name }}/TankBattle.jar
          echo '#!/bin/bash
          java -jar TankBattle.jar' > release/TankBattle-${{ matrix.platform_name }}/TankBattle.sh
          chmod +x release/TankBattle-${{ matrix.platform_name }}/TankBattle.sh
          cd release && zip -r TankBattle-${{ matrix.platform_name }}.zip TankBattle-${{ matrix.platform_name }}

      - name: Create Platform-specific Package (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p release/TankBattle-${{ matrix.platform_name }}
          cp target/*-shaded.jar release/TankBattle-${{ matrix.platform_name }}/TankBattle.jar
          echo '#!/bin/bash
          java -jar TankBattle.jar' > release/TankBattle-${{ matrix.platform_name }}/TankBattle.sh
          chmod +x release/TankBattle-${{ matrix.platform_name }}/TankBattle.sh
          cd release && zip -r TankBattle-${{ matrix.platform_name }}.zip TankBattle-${{ matrix.platform_name }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TankBattle-${{ matrix.platform_name }}-installers
          path: |
            release/*.zip
            release/*.exe
            release/*.msi
            release/*.dmg
            release/*.deb
            release/*.rpm

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List Downloaded Artifacts
        run: ls -R artifacts/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/TankBattle-windows-installers/*.zip
            artifacts/TankBattle-windows-installers/*.exe
            artifacts/TankBattle-windows-installers/*.msi
            artifacts/TankBattle-mac-installers/*.zip
            artifacts/TankBattle-mac-installers/*.dmg
            artifacts/TankBattle-linux-installers/*.zip
            artifacts/TankBattle-linux-installers/*.deb
            artifacts/TankBattle-linux-installers/*.rpm
          draft: false
          prerelease: false
          name: Tank Battle ${{ github.ref_name }}
          body: |
            ## Tank Battle Release ${{ github.ref_name }}
            
            ### 下载说明
            #### Windows用户
            - 推荐: 下载 TankBattle-Windows-Installer.exe 安装包
            - 备选: 下载 TankBattle-windows.zip，解压后运行TankBattle.bat
            
            #### macOS用户
            - 推荐: 下载 TankBattle-macOS.dmg 安装包
            - 备选: 下载 TankBattle-mac.zip，解压后在终端中运行 ./TankBattle.sh
            
            #### Linux用户
            - 推荐: 下载 TankBattle-Linux.deb 安装包
            - 备选: 下载 TankBattle-linux.zip，解压后在终端中运行 ./TankBattle.sh
            
            ### 系统要求
            - 需要Java 17或更高版本